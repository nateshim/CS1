{"version":3,"sources":["navigation.js","Home.js","serviceWorker.js","index.js"],"names":["useStyles","createStyles","navBar","display","alignItems","padding","withStyles","props","classes","Container","className","Box","xs","lg","Typography","section","text","fontFamily","fontWeight","header","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","App","exact","path","component","Home","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"+NAuBMA,EAAYC,YAAa,CAC3BC,OAAQ,CACJC,QAAS,OACTC,WAAY,SACZC,QAAS,UAIFC,cAAWN,EAAXM,EAvBI,SAACC,GAChB,IAAMC,EAAUD,EAAMC,QACtB,OACI,kBAACC,EAAA,EAAD,CAAWC,UAAWF,EAAQN,QAC1B,kBAACS,EAAA,EAAD,CAAKR,QAAS,CAACS,GAAI,QAASC,GAAI,SAC5B,kBAACC,EAAA,EAAD,2BACA,kBAAC,IAAD,aACA,kBAAC,IAAD,kBACA,kBAAC,IAAD,iBACA,kBAAC,IAAD,mBCGVd,EAAYC,YAAa,CAC3Bc,QAAS,CACLZ,QAAS,QAEba,KAAM,CACFC,WAAY,YACZC,WAAY,KAEhBC,OAAQ,CACJF,WAAY,UACZC,WAAY,OAILZ,cAAWN,EAAXM,EA3BF,SAACC,GACV,IAAMC,EAAUD,EAAMC,QACtB,OACI,kBAACG,EAAA,EAAD,KACI,kBAAC,EAAD,MACA,kBAACF,EAAA,EAAD,CAAWC,UAAaF,EAAQO,SAC5B,kBAACD,EAAA,EAAD,CAAYJ,UAAWF,EAAQW,QAA/B,kCACA,kBAACL,EAAA,EAAD,CAAYJ,UAAWF,EAAQQ,MAA/B,wC,eCFVI,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,M,YCzFjE,SAASC,IACL,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,OAAOC,UAAWC,OAOhDC,iBAAO,kBAACL,EAAD,MAAQM,SAASC,eAAe,SDGhC,SAAkBzB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIyB,IAAIC,OAAwBjC,OAAOC,SAASiC,MACpDC,SAAWnC,OAAOC,SAASkC,OAIvC,OAGFnC,OAAOoC,iBAAiB,QAAQ,WAC9B,IAAM/B,EAAK,UAAM4B,OAAN,sBAEPnC,IAgEV,SAAiCO,EAAOC,GAEtC+B,MAAMhC,EAAO,CACXiC,QAAS,CAAE,iBAAkB,YAE5B5B,MAAK,SAAA6B,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CpC,UAAUC,cAAcoC,MAAMlC,MAAK,SAAAC,GACjCA,EAAakC,aAAanC,MAAK,WAC7BV,OAAOC,SAAS6C,eAKpB1C,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFA4B,CAAwB1C,EAAOC,GAI/BC,UAAUC,cAAcoC,MAAMlC,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OC3B/BE,K","file":"static/js/main.c82345d1.chunk.js","sourcesContent":["import React from 'react';\nimport Box from '@material-ui/core/Box';\nimport Container from '@material-ui/core/Container';\nimport {Link} from 'react-router-dom';\nimport Typography from '@material-ui/core/Typography';\nimport {withStyles, createStyles} from '@material-ui/styles';\n\n\nconst Navigation = (props) => {\n    const classes = props.classes;\n    return (\n        <Container className={classes.navBar}>\n            <Box display={{xs: 'block', lg: 'flex'}}>\n                <Typography>Richmond High: CS1</Typography>\n                <Link>Home</Link>\n                <Link>Resources</Link>\n                <Link>Syllabus</Link>\n                <Link>Staff</Link>\n            </Box>\n        </Container>\n    );\n}\n\nconst useStyles = createStyles({\n    navBar: {\n        display: 'flex',\n        alignItems: 'center',\n        padding: '2rem',\n    },\n});\n\nexport default withStyles(useStyles)(Navigation);","import React from 'react';\nimport Navigation from './navigation';\nimport Box from '@material-ui/core/Box';\nimport {withStyles, createStyles} from '@material-ui/styles';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\n\nconst Home = (props) => {\n    const classes = props.classes;\n    return (\n        <Box>\n            <Navigation/>\n            <Container className = {classes.section}>\n                <Typography className={classes.header}>This is an example of a header</Typography>\n                <Typography className={classes.text}>This is an example of some text</Typography>\n            </Container>\n        </Box>\n    );\n}\n\nconst useStyles = createStyles({\n    section: {\n        display: 'flex',\n    },\n    text: {\n        fontFamily: 'Open Sans',\n        fontWeight: 300,\n    },\n    header: {\n        fontFamily: 'Archivo',\n        fontWeight: 500,\n    }\n})\n\nexport default withStyles(useStyles)(Home);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport Home from './Home';\nimport './css/index.css';\nimport { BrowserRouter as Router,Route, Switch } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\nimport { render } from 'react-dom';\n\nfunction App() {\n    return (\n      <Router>\n        <div>\n          <Switch>\n            <Route exact path=\"/CS1\" component={Home}/>\n          </Switch>\n        </div>\n      </Router>\n    );\n}\n\nrender(<App/>, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}